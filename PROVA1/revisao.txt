Programa: Estrutura de dados + algoritmo

Estrutura de dados: uma forma l√≥gica de organizar os dados. Um relocionamento.
algoritmo: instrui√ß√µes, a√ßoes a serem executadas sob os dados.

TAD: Tipo Abstrato de Dado.
√â um a forma de definir um novo tipo de dado e as opera√ß√µes que o manipulam. IDEIA CENTRAL: esconder (encapsular) de quem usa o TAD a forma que ele foi implementado.

Vantagens de utilizar um TAD:
 - seguran√ßa dos dados
 - encapsulamento
 - reutiliza√ß√£o 
 - flexibiliza√ß√£o

Definindo um TAD:
 - Cabe√ßalho: 
    Nome: lista linear
    Dados: int
    Opera√ß√µes: insere
 - Especifica√ß√£o das opera√ß√µes:
    Entrada: 
    Pre-condi√ß√£o:
    Processo:
    Sa√≠da:
    P√≥s-condi√ß√£o:

Lista Lineares
 - Agrupar dados sequenciamente
 - Disciplina de acesso -> n√£o possui
 - Criterio de ordena√ß√£o -> | Ordenado
                            | N√£o Ordenado
 - Formas de aloca√ß√£o -> Est√°tica X Din√°mica
                        ‚úî Simplicidade de implementa√ß√£o                  ‚úî uso otimizado da mem√≥ria
                        üö´ definir um tamanho da lista (SUPER ou SUB)    üö´ programas mais complexos

Formas de Acesso
 - Sequencial -> ‚úî acesso direto ao e-nezimo elemento 
                üö´ inserir e remover poder resuoltar em deslocamento
                
- Encadeada -> ‚úî inserir e remover n√£o precisa deslisar
               üö´ precesa percorrer a lista

Estatica Sequencial

Dinamica Encadeada

Custo Computacional
 - Lista estatica sequencial
   - criar_lista: O(1)
   - lista_vazia: O(1)
   - lista_cheia: O(1)
   - remover_elemento: O(n)
   - remover_todas_ocorrencias: O(n^2)
   - remover_pares: O(n^2)
   - menor: O(n)
   - ordenar_lista: O(nlogn) -> O(n^3) *n√£o √© tao importante
   - tamanho: O(1)
   - concatecar: O(n)

 - Lista dinamica Encadeada
   - criar_lista: O(1)
   - lista_vazia: O(1)
   - lista_cheia: n√£o tem n√© padrin
   - remover_elemento: O(n)
   - remover_todas_ocorrencias: O(n)
   - remover_pares: O(n)
   - menor: O(n)
   - ordenar_lista: O(nlogn) -> O(n^2)
   - tamanho: O(n)
   - concatecar: O(n)

Lista estatica sequencial 
    typedef struct lista *Lista;
    int insere(Lista lst, int elemento)

int main(){
    int a = 5;
    Lista l;
    l = cria_lista();
    ...
    insere(l, a);
}

Lista dinamica
 L -> null
 typedef struct lista *Lista;
 insere(Lista *lst, int elemento){
    NOVO = (lista) malloc (sizeof(struct lista));
    NOVO -> info = elemento
    NOVO -> prox = *lst;
    *lst = NOVO;
 }

 int main(){
    int a = 5;
    Lista l;
    l = cria_lista8();
    insere(&l, a);
 }
 

Lista Est√°tica Sequencial (ARRAY)
Vantagens: 
	Acesso rapido e direto aos elementos
	Tempo constante
	Facilidade de modificar informa√ß√µes

Desvantagens:
	Defini√ß√£o previa do tamanho
	Ruim de inserir/remover elemntos entre outros
